name: Build_x86_64

on:
  repository_dispatch:
  workflow_dispatch:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@master


    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo "Starting environment initialization..."
        set +e
        docker rmi $(docker images -q) || true # 添加 || true 避免没有 docker 镜像时报错
        echo "Deleting pre-installed large files, please wait..."
        sudo rm -rf \
          /usr/share/dotnet \
          /usr/local/lib/android \
          /opt/ghc \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge azure-cli* docker* ghc* zulu* hhvm* llvm* firefox* google* dotnet* aspnetcore* powershell* openjdk* adoptopenjdk* mysql* php* mongodb* moby* snap* || true
        echo "Updating apt package list..."
        sudo -E apt-get update
        echo "Installing build dependencies..."
        sudo -E apt-get -y install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        echo "Cleaning up apt cache..."
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
        echo "Environment initialization complete."

    - name: Clone OpenWrt source code
      env:
        REPO_URL: https://github.com/coolsnowwolf/lede
        REPO_BRANCH: master
      run: |
        echo "Cloning OpenWrt source from $REPO_URL branch $REPO_BRANCH..."
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        echo "OpenWrt source cloned."

    - name: Manually add/override geoview package
      # 此步骤的 working-directory 是仓库根目录 (actions/checkout 检出的地方)
      # openwrt 源码位于 ./openwrt/ 子目录
      run: |
        echo "Attempting to manually add/override geoview package..."
        GEOVIEW_PKG_SOURCE_DIR_IN_REPO="." # 假设 geoview_override.mk 和 .Config.in 在你仓库的根目录
        GEOVIEW_OVERRIDE_MK_NAME="geoview_override.mk"
        GEOVIEW_OVERRIDE_CONFIG_IN_NAME="geoview_override.Config.in"
        
        GEOVIEW_PKG_TARGET_DIR="openwrt/package/custom_packages/geoview"
        
        echo "Creating custom package directory: ${GEOVIEW_PKG_TARGET_DIR}"
        mkdir -p "${GEOVIEW_PKG_TARGET_DIR}"
        
        if [ -f "${GEOVIEW_PKG_SOURCE_DIR_IN_REPO}/${GEOVIEW_OVERRIDE_MK_NAME}" ] && [ -f "${GEOVIEW_PKG_SOURCE_DIR_IN_REPO}/${GEOVIEW_OVERRIDE_CONFIG_IN_NAME}" ]; then
          echo "Copying custom geoview Makefile and Config.in..."
          cp "${GEOVIEW_PKG_SOURCE_DIR_IN_REPO}/${GEOVIEW_OVERRIDE_MK_NAME}" "${GEOVIEW_PKG_TARGET_DIR}/Makefile"
          cp "${GEOVIEW_PKG_SOURCE_DIR_IN_REPO}/${GEOVIEW_OVERRIDE_CONFIG_IN_NAME}" "${GEOVIEW_PKG_TARGET_DIR}/Config.in"
          echo "Custom geoview Makefile and Config.in successfully copied."
        else
          echo "ERROR: Custom geoview files (${GEOVIEW_OVERRIDE_MK_NAME} or ${GEOVIEW_OVERRIDE_CONFIG_IN_NAME}) NOT found in repository root."
          echo "Please ensure these files exist in the root of your AutoBuild-OpenWrt repository."
          exit 1
        fi
        echo "Custom geoview package definition added."

    - name: Configure and Update OpenWrt Feeds
      working-directory: ./openwrt # 后续操作在 openwrt 目录内
      run: |
        echo "Configuring feeds..."
        echo "src-git kenzo https://github.com/kenzok8/openwrt-packages" >> ./feeds.conf.default
        echo "src-git xiaorouji https://github.com/xiaorouji/openwrt-passwall-packages" >> ./feeds.conf.default
        # 根据你的需要，如果还使用 'small' feed (例如为了 luci-app-ssr-plus), 在这里添加:
        # echo "src-git small https://github.com/kenzok8/small" >> ./feeds.conf.default
        
        echo "Updating feeds..."
        ./scripts/feeds update -a
        
        echo "Installing packages from selected feeds..."
        # 只安装 xiaorouji feed 中的所有包定义 (如果需要 passwall)
        # 如果你确定这个 feed 里的包是你需要的，并且不会导致过多磁盘占用
        ./scripts/feeds install -a -p xiaorouji
        
        # 对于 kenzo 和 small feeds (如果你添加了 small)，考虑不使用 'install -a'
        # 或者只安装你明确需要的包，例如:
        # ./scripts/feeds install -p kenzo <packagename1> <packagename2>
        # ./scripts/feeds install -p small <packagename_from_small>
        # 这样做有助于减少磁盘空间占用和潜在的依赖冲突
        # 如果 `make defconfig` 阶段提示缺少某个包的定义，再回来这里添加显式安装命令。
        echo "Feeds update and install step finished."

    - name: Configuration Customization - Build_x86_64
      env:
        CONFIG_FILE: 'x86_64.config' # 请确保此文件已针对递归依赖问题进行了优化
      run: |
        echo "Starting configuration customization..."
        if [ -e ../$CONFIG_FILE ]; then # $CONFIG_FILE 在仓库根目录
          echo "Moving $CONFIG_FILE to openwrt/.config"
          mv ../$CONFIG_FILE openwrt/.config
        else
          echo "ERROR: $CONFIG_FILE not found in repository root."
          exit 1
        fi
        
        if [ -f ../customize.sh ]; then # customize.sh 也在仓库根目录
          echo "Running customize.sh script..."
          cp ../customize.sh openwrt/customize.sh # 复制到 openwrt 目录以便执行
          chmod +x openwrt/customize.sh
          (cd openwrt && ./customize.sh) # 在 openwrt 目录内执行
        else
          echo "customize.sh not found, skipping."
        fi
        
        echo "Running make defconfig..."
        cd openwrt
        rm -rf tmp # 清理 tmp 目录
        make defconfig
        echo "make defconfig finished."
        
    - name: Download package sources
      working-directory: ./openwrt
      run: |
        echo "Downloading package sources..."
        make download -j$(nproc)
        echo "Cleaning up small/incomplete downloads..."
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        echo "Download step finished."

    - name: Build firmware
      working-directory: ./openwrt
      run: |
        echo "Starting firmware build with $(nproc) threads."
        make -j$(nproc) V=s
        echo "Firmware build finished."

    - name: Upload artifact
      uses: actions/upload-artifact@v3 # 建议使用具体版本号
      if: success() || failure() # 无论成功失败都上传，方便排查
      with:
        name: OpenWrt_x86_64_firmware
        path: openwrt/bin/targets/
        # 如果编译失败，bin/targets 可能为空，可以考虑上传更多日志或 .config
        # path: |
        #   openwrt/bin/targets/
        #   openwrt/.config 
        #   openwrt/logs/ # (如果 OpenWrt 有专门的日志目录)
